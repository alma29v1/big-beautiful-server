"#!/usr/bin/env python3\n\"\"\"\nEnhanced AI Email Marketing Widget\nFull Mailchimp integration with advanced analytics and AI-powered optimization\n\"\"\"\n\nfrom PySide6.QtWidgets import (\n    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, \n    QComboBox, QTextEdit, QGroupBox, QFormLayout, QLineEdit,\n    QSpinBox, QCheckBox, QTableWidget, QTableWidgetItem,\n    QHeaderView, QMessageBox, QProgressBar, QTabWidget,\n    QScrollArea, QFrame, QSplitter, QInputDialog, QGridLayout,\n    QDialog, QTreeWidget, QTreeWidgetItem, QDateEdit, QSlider\n)\nfrom PySide6.QtCore import Qt, QThread, Signal, QTimer, QDate\nfrom PySide6.QtGui import QFont, QPixmap, QColor\nimport json\nimport csv\nimport logging\nfrom datetime import datetime, timedelta\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas\nfrom matplotlib.figure import Figure\nimport seaborn as sns\n\n# Import the enhanced service\ntry:\n    from services.enhanced_ai_email_service import EnhancedAIEmailService, MailchimpCampaignData, CampaignAnalysis\n    SERVICE_AVAILABLE = True\nexcept ImportError:\n    SERVICE_AVAILABLE = False\n\nlogger = logging.getLogger(__name__)\n\nclass MailchimpDataWorker(QThread):\n    \"\"\"Worker thread for loading Mailchimp data\"\"\"\n    progress_signal = Signal(str)\n    data_loaded_signal = Signal(dict)\n    error_signal = Signal(str)\n    \n    def __init__(self):\n        super().__init__()\n        if SERVICE_AVAILABLE:\n            self.service = EnhancedAIEmailService()\n        else:\n            self.service = None\n    \n    def run(self):\n        try:\n            if not self.service:\n                self.error_signal.emit(\"Enhanced AI service not available\")\n                return\n            \n            self.progress_signal.emit(\"Connecting to Mailchimp...\")\n            data = self.service.get_comprehensive_mailchimp_data()\n            \n            if \"error\" in data:\n                self.error_signal.emit(data[\"error\"])\n            else:\n                self.data_loaded_signal.emit(data)\n                \n        except Exception as e:\n            self.error_signal.emit(f\"Error loading Mailchimp data: {e}\")\n\nclass CampaignAnalysisWorker(QThread):\n    \"\"\"Worker thread for AI campaign analysis\"\"\"\n    progress_signal = Signal(str)\n    analysis_complete_signal = Signal(dict)\n    error_signal = Signal(str)\n    \n    def __init__(self, campaigns_data):\n        super().__init__()\n        self.campaigns_data = campaigns_data\n        if SERVICE_AVAILABLE:\n            self.service = EnhancedAIEmailService()\n        else:\n            self.service = None\n    \n    def run(self):\n        try:\n            if not self.service:\n                self.error_signal.emit(\"Enhanced AI service not available\")\n                return\n            \n            self.progress_signal.emit(\"Analyzing campaign performance with AI...\")\n            \n            # Convert data to MailchimpCampaignData objects\n            campaigns = []\n            for campaign_dict in self.campaigns_data:\n                campaign = MailchimpCampaignData(**campaign_dict)\n                campaigns.append(campaign)\n            \n            # Get AI analysis\n            analysis = self.service.ai_analyze_campaign_performance(campaigns)\n            \n            # Get additional insights\n            trends = self.service.analyze_performance_trends()\n            \n            result = {\n                \"ai_analysis\": analysis,\n                \"performance_trends\": trends,\n                \"optimization_opportunities\": self.service.create_automated_campaign_optimization(campaigns[0].campaign_id) if campaigns else {}\n            }\n            \n            self.analysis_complete_signal.emit(result)\n            \n        except Exception as e:\n            self.error_signal.emit(f\"Error in AI analysis: {e}\")\n\nclass EnhancedAIEmailWidget(QWidget):\n    \"\"\"Enhanced AI Email Marketing Widget with full Mailchimp integration\"\"\"\n    \n    def __init__(self):\n        super().__init__()\n        self.mailchimp_data = {}\n        self.campaign_analysis = {}\n        self.current_campaigns = []\n        \n        if SERVICE_AVAILABLE:\n            self.ai_service = EnhancedAIEmailService()\n        else:\n            self.ai_service = None\n        \n        self.setup_ui()\n        self.setup_connections()\n        \n        # Auto-load data on startup\n        QTimer.singleShot(1000, self.load_mailchimp_data)\n    \n    def setup_ui(self):\n        \"\"\"Setup the enhanced user interface\"\"\"\n        layout = QVBoxLayout(self)\n        \n        # Header\n        header = self.create_header()\n        layout.addWidget(header)\n        \n        # Main content tabs\n        self.main_tabs = QTabWidget()\n        \n        # 1. Dashboard Tab\n        self.dashboard_tab = self.create_dashboard_tab()\n        self.main_tabs.addTab(self.dashboard_tab, \"üìä Dashboard\")\n        \n        # 2. Campaign Analytics Tab\n        self.analytics_tab = self.create_analytics_tab()\n        self.main_tabs.addTab(self.analytics_tab, \"üìà Analytics\")\n        \n        # 3. AI Campaign Builder Tab\n        self.builder_tab = self.create_campaign_builder_tab()\n        self.main_tabs.addTab(self.builder_tab, \"ü§ñ AI Builder\")\n        \n        # 4. Performance Optimizer Tab\n        self.optimizer_tab = self.create_optimizer_tab()\n        self.main_tabs.addTab(self.optimizer_tab, \"‚ö° Optimizer\")\n        \n        # 5. Audience Intelligence Tab\n        self.audience_tab = self.create_audience_tab()\n        self.main_tabs.addTab(self.audience_tab, \"üë• Audience\")\n        \n        # 6. AI Chat Assistant Tab\n        self.chat_tab = self.create_ai_chat_tab()\n        self.main_tabs.addTab(self.chat_tab, \"üí¨ AI Assistant\")\n        \n        layout.addWidget(self.main_tabs)\n        \n        # Status bar\n        self.status_bar = self.create_status_bar()\n        layout.addWidget(self.status_bar)\n    \n    def create_header(self):\n        \"\"\"Create header with controls\"\"\"\n        header = QFrame()\n        header.setFrameStyle(QFrame.StyledPanel)\n        layout = QHBoxLayout(header)\n        \n        # Title\n        title = QLabel(\"üöÄ Enhanced AI Email Marketing\")\n        title.setFont(QFont(\"Arial\", 16, QFont.Bold))\n        layout.addWidget(title)\n        \n        layout.addStretch()\n        \n        # Control buttons\n        self.refresh_btn = QPushButton(\"üîÑ Refresh Data\")\n        self.refresh_btn.clicked.connect(self.load_mailchimp_data)\n        layout.addWidget(self.refresh_btn)\n        \n        self.export_btn = QPushButton(\"üìä Export Report\")\n        self.export_btn.clicked.connect(self.export_comprehensive_report)\n        layout.addWidget(self.export_btn)\n        \n        self.settings_btn = QPushButton(\"‚öôÔ∏è Settings\")\n        self.settings_btn.clicked.connect(self.open_settings)\n        layout.addWidget(self.settings_btn)\n        \n        return header\n    \n    def create_dashboard_tab(self):\n        \"\"\"Create main dashboard tab\"\"\"\n        tab = QWidget()\n        layout = QVBoxLayout(tab)\n        \n        # Key metrics cards\n        metrics_layout = QHBoxLayout()\n        \n        self.total_campaigns_card = self.create_metric_card(\"Total Campaigns\", \"0\", \"üìß\")\n        self.avg_open_rate_card = self.create_metric_card(\"Avg Open Rate\", \"0%\", \"üìñ\")\n        self.avg_click_rate_card = self.create_metric_card(\"Avg Click Rate\", \"0%\", \"üëÜ\")\n        self.total_subscribers_card = self.create_metric_card(\"Total Subscribers\", \"0\", \"üë•\")\n        \n        metrics_layout.addWidget(self.total_campaigns_card)\n        metrics_layout.addWidget(self.avg_open_rate_card)\n        metrics_layout.addWidget(self.avg_click_rate_card)\n        metrics_layout.addWidget(self.total_subscribers_card)\n        \n        layout.addLayout(metrics_layout)\n        \n        # Charts section\n        charts_splitter = QSplitter(Qt.Horizontal)\n        \n        # Performance chart\n        self.performance_chart = self.create_performance_chart()\n        charts_splitter.addWidget(self.performance_chart)\n        \n        # Recent campaigns list\n        self.recent_campaigns_widget = self.create_recent_campaigns_widget()\n        charts_splitter.addWidget(self.recent_campaigns_widget)\n        \n        layout.addWidget(charts_splitter)\n        \n        # AI insights section\n        self.ai_insights_widget = self.create_ai_insights_widget()\n        layout.addWidget(self.ai_insights_widget)\n        \n        return tab\n    \n    def create_analytics_tab(self):\n        \"\"\"Create detailed analytics tab\"\"\"\n        tab = QWidget()\n        layout = QVBoxLayout(tab)\n        \n        # Analytics controls\n        controls_layout = QHBoxLayout()\n        \n        controls_layout.addWidget(QLabel(\"Time Period:\"))\n        self.time_period_combo = QComboBox()\n        self.time_period_combo.addItems([\"Last 7 days\", \"Last 30 days\", \"Last 90 days\", \"Last year\", \"All time\"])\n        self.time_period_combo.setCurrentText(\"Last 30 days\")\n        controls_layout.addWidget(self.time_period_combo)\n        \n        controls_layout.addWidget(QLabel(\"Metric:\"))\n        self.metric_combo = QComboBox()\n        self.metric_combo.addItems([\"Open Rate\", \"Click Rate\", \"Conversion Rate\", \"Revenue\", \"Unsubscribes\"])\n        controls_layout.addWidget(self.metric_combo)\n        \n        self.analyze_btn = QPushButton(\"üîç Analyze\")\n        self.analyze_btn.clicked.connect(self.run_ai_analysis)\n        controls_layout.addWidget(self.analyze_btn)\n        \n        controls_layout.addStretch()\n        layout.addLayout(controls_layout)\n        \n        # Analytics content\n        analytics_tabs = QTabWidget()\n        \n        # Performance trends\n        self.trends_widget = self.create_trends_widget()\n        analytics_tabs.addTab(self.trends_widget, \"üìà Trends\")\n        \n        # Campaign comparison\n        self.comparison_widget = self.create_comparison_widget()\n        analytics_tabs.addTab(self.comparison_widget, \"‚öñÔ∏è Comparison\")\n        \n        # Segmentation analysis\n        self.segmentation_widget = self.create_segmentation_widget()\n        analytics_tabs.addTab(self.segmentation_widget, \"üéØ Segmentation\")\n        \n        layout.addWidget(analytics_tabs)\n        \n        return tab\n    \n    def create_campaign_builder_tab(self):\n        \"\"\"Create AI campaign builder tab\"\"\"\n        tab = QWidget()\n        layout = QVBoxLayout(tab)\n        \n        # Campaign configuration\n        config_group = QGroupBox(\"Campaign Configuration\")\n        config_layout = QFormLayout(config_group)\n        \n        self.campaign_type_combo = QComboBox()\n        self.campaign_type_combo.addItems([\n            \"Fiber Introduction\", \"ADT Security Offer\", \"Combined Services\",\n            \"Follow-up Campaign\", \"Seasonal Promotion\", \"Neighborhood Focus\"\n        ])\n        config_layout.addRow(\"Campaign Type:\", self.campaign_type_combo)\n        \n        self.target_audience_input = QTextEdit()\n        self.target_audience_input.setMaximumHeight(80)\n        self.target_audience_input.setPlaceholderText(\"Describe your target audience...\")\n        config_layout.addRow(\"Target Audience:\", self.target_audience_input)\n        \n        self.campaign_tone_combo = QComboBox()\n        self.campaign_tone_combo.addItems([\"Professional\", \"Friendly\", \"Urgent\", \"Informative\", \"Conversational\"])\n        config_layout.addRow(\"Tone:\", self.campaign_tone_combo)\n        \n        self.campaign_goals_input = QLineEdit()\n        self.campaign_goals_input.setPlaceholderText(\"Drive conversions, increase engagement, etc.\")\n        config_layout.addRow(\"Goals:\", self.campaign_goals_input)\n        \n        layout.addWidget(config_group)\n        \n        # AI generation controls\n        generation_layout = QHBoxLayout()\n        \n        self.generate_campaign_btn = QPushButton(\"ü§ñ Generate Campaign\")\n        self.generate_campaign_btn.clicked.connect(self.generate_ai_campaign)\n        generation_layout.addWidget(self.generate_campaign_btn)\n        \n        self.optimize_existing_btn = QPushButton(\"‚ö° Optimize Existing\")\n        self.optimize_existing_btn.clicked.connect(self.optimize_existing_campaign)\n        generation_layout.addWidget(self.optimize_existing_btn)\n        \n        generation_layout.addStretch()\n        layout.addLayout(generation_layout)\n        \n        # Generated content display\n        self.generated_content_tabs = QTabWidget()\n        \n        # Subject lines\n        self.subject_lines_widget = QTextEdit()\n        self.subject_lines_widget.setReadOnly(True)\n        self.generated_content_tabs.addTab(self.subject_lines_widget, \"üìù Subject Lines\")\n        \n        # Email templates\n        self.email_templates_widget = QTextEdit()\n        self.email_templates_widget.setReadOnly(True)\n        self.generated_content_tabs.addTab(self.email_templates_widget, \"üìß Templates\")\n        \n        # A/B test strategy\n        self.ab_test_widget = QTextEdit()\n        self.ab_test_widget.setReadOnly(True)\n        self.generated_content_tabs.addTab(self.ab_test_widget, \"üß™ A/B Testing\")\n        \n        # Performance predictions\n        self.predictions_widget = QTextEdit()\n        self.predictions_widget.setReadOnly(True)\n        self.generated_content_tabs.addTab(self.predictions_widget, \"üîÆ Predictions\")\n        \n        layout.addWidget(self.generated_content_tabs)\n        \n        return tab\n    \n    def create_optimizer_tab(self):\n        \"\"\"Create performance optimizer tab\"\"\"\n        tab = QWidget()\n        layout = QVBoxLayout(tab)\n        \n        # Optimization controls\n        opt_controls = QHBoxLayout()\n        \n        opt_controls.addWidget(QLabel(\"Select Campaign:\"))\n        self.optimize_campaign_combo = QComboBox()\n        opt_controls.addWidget(self.optimize_campaign_combo)\n        \n        self.run_optimization_btn = QPushButton(\"üöÄ Run Optimization\")\n        self.run_optimization_btn.clicked.connect(self.run_campaign_optimization)\n        opt_controls.addWidget(self.run_optimization_btn)\n        \n        opt_controls.addStretch()\n        layout.addLayout(opt_controls)\n        \n        # Optimization results\n        opt_tabs = QTabWidget()\n        \n        # Current performance\n        self.current_performance_widget = self.create_performance_summary_widget()\n        opt_tabs.addTab(self.current_performance_widget, \"üìä Current Performance\")\n        \n        # AI recommendations\n        self.recommendations_widget = QTextEdit()\n        self.recommendations_widget.setReadOnly(True)\n        opt_tabs.addTab(self.recommendations_widget, \"üéØ Recommendations\")\n        \n        # Optimization roadmap\n        self.roadmap_widget = self.create_optimization_roadmap_widget()\n        opt_tabs.addTab(self.roadmap_widget, \"üó∫Ô∏è Roadmap\")\n        \n        layout.addWidget(opt_tabs)\n        \n        return tab\n    \n    def create_audience_tab(self):\n        \"\"\"Create audience intelligence tab\"\"\"\n        tab = QWidget()\n        layout = QVBoxLayout(tab)\n        \n        # Audience overview\n        overview_layout = QHBoxLayout()\n        \n        # Engagement segments\n        self.engagement_chart = self.create_engagement_chart()\n        overview_layout.addWidget(self.engagement_chart)\n        \n        # Growth trends\n        self.growth_chart = self.create_growth_chart()\n        overview_layout.addWidget(self.growth_chart)\n        \n        layout.addLayout(overview_layout)\n        \n        # Detailed audience data\n        audience_tabs = QTabWidget()\n        \n        # Segmentation\n        self.audience_segments_widget = self.create_audience_segments_widget()\n        audience_tabs.addTab(self.audience_segments_widget, \"üéØ Segments\")\n        \n        # Behavioral insights\n        self.behavioral_insights_widget = self.create_behavioral_insights_widget()\n        audience_tabs.addTab(self.behavioral_insights_widget, \"üß† Behavior\")\n        \n        # Predictive analytics\n        self.predictive_analytics_widget = self.create_predictive_analytics_widget()\n        audience_tabs.addTab(self.predictive_analytics_widget, \"üîÆ Predictions\")\n        \n        layout.addWidget(audience_tabs)\n        \n        return tab\n    \n    def create_ai_chat_tab(self):\n        \"\"\"Create AI chat assistant tab\"\"\"\n        tab = QWidget()\n        layout = QVBoxLayout(tab)\n        \n        # Chat display\n        self.chat_display = QTextEdit()\n        self.chat_display.setReadOnly(True)\n        self.chat_display.setStyleSheet(\"\"\"\n            QTextEdit {\n                background-color: #f8f9fa;\n                border: 1px solid #dee2e6;\n                border-radius: 8px;\n                padding: 10px;\n                font-family: 'Segoe UI', Arial, sans-serif;\n            }\n        \"\"\")\n        layout.addWidget(self.chat_display)\n        \n        # Chat input\n        input_layout = QHBoxLayout()\n        \n        self.chat_input = QLineEdit()\n        self.chat_input.setPlaceholderText(\"Ask about your email campaigns, analytics, optimization strategies...\")\n        self.chat_input.returnPressed.connect(self.send_chat_message)\n        input_layout.addWidget(self.chat_input)\n        \n        self.send_chat_btn = QPushButton(\"Send\")\n        self.send_chat_btn.clicked.connect(self.send_chat_message)\n        input_layout.addWidget(self.send_chat_btn)\n        \n        layout.addLayout(input_layout)\n        \n        # Quick actions\n        quick_actions = QHBoxLayout()\n        \n        quick_btns = [\n            (\"üìä Analyze Performance\", \"Analyze my recent campaign performance\"),\n            (\"üí° Get Recommendations\", \"What can I do to improve my email campaigns?\"),\n            (\"üìà Show Trends\", \"Show me performance trends over the last 3 months\"),\n            (\"üéØ Optimize Subject Lines\", \"Help me optimize my subject lines\")\n        ]\n        \n        for btn_text, prompt in quick_btns:\n            btn = QPushButton(btn_text)\n            btn.clicked.connect(lambda checked, p=prompt: self.send_quick_message(p))\n            quick_actions.addWidget(btn)\n        \n        layout.addLayout(quick_actions)\n        \n        # Add welcome message\n        self.add_chat_message(\"AI Assistant\", \n            \"üëã Hello! I'm your AI email marketing assistant. I can help you analyze campaigns, \"\n            \"optimize performance, and create better email content. What would you like to know?\", \n            is_ai=True)\n        \n        return tab\n    \n    def create_status_bar(self):\n        \"\"\"Create status bar\"\"\"\n        status_frame = QFrame()\n        status_frame.setFrameStyle(QFrame.StyledPanel)\n        layout = QHBoxLayout(status_frame)\n        \n        self.status_label = QLabel(\"Ready\")\n        layout.addWidget(self.status_label)\n        \n        layout.addStretch()\n        \n        self.progress_bar = QProgressBar()\n        self.progress_bar.setVisible(False)\n        layout.addWidget(self.progress_bar)\n        \n        # Connection status\n        self.connection_status = QLabel(\"üî¥ Disconnected\")\n        layout.addWidget(self.connection_status)\n        \n        return status_frame\n    \n    # Helper methods for creating widgets\n    def create_metric_card(self, title: str, value: str, icon: str):\n        \"\"\"Create a metric display card\"\"\"\n        card = QFrame()\n        card.setFrameStyle(QFrame.StyledPanel)\n        card.setStyleSheet(\"\"\"\n            QFrame {\n                background-color: white;\n                border: 1px solid #e0e0e0;\n                border-radius: 8px;\n                padding: 10px;\n            }\n        \"\"\")\n        \n        layout = QVBoxLayout(card)\n        \n        header_layout = QHBoxLayout()\n        header_layout.addWidget(QLabel(icon))\n        header_layout.addWidget(QLabel(title))\n        header_layout.addStretch()\n        layout.addLayout(header_layout)\n        \n        value_label = QLabel(value)\n        value_label.setFont(QFont(\"Arial\", 20, QFont.Bold))\n        value_label.setAlignment(Qt.AlignCenter)\n        layout.addWidget(value_label)\n        \n        # Store reference to value label for updates\n        setattr(card, 'value_label', value_label)\n        \n        return card\n    \n    def create_performance_chart(self):\n        \"\"\"Create performance chart widget\"\"\"\n        widget = QWidget()\n        layout = QVBoxLayout(widget)\n        \n        layout.addWidget(QLabel(\"üìà Performance Trends\"))\n        \n        # Placeholder for matplotlib chart\n        self.performance_figure = Figure(figsize=(8, 4))\n        self.performance_canvas = FigureCanvas(self.performance_figure)\n        layout.addWidget(self.performance_canvas)\n        \n        return widget\n    \n    def create_recent_campaigns_widget(self):\n        \"\"\"Create recent campaigns list widget\"\"\"\n        widget = QGroupBox(\"üìß Recent Campaigns\")\n        layout = QVBoxLayout(widget)\n        \n        self.campaigns_table = QTableWidget()\n        self.campaigns_table.setColumnCount(4)\n        self.campaigns_table.setHorizontalHeaderLabels([\"Subject\", \"Open Rate\", \"Click Rate\", \"Sent\"])\n        self.campaigns_table.horizontalHeader().setStretchLastSection(True)\n        layout.addWidget(self.campaigns_table)\n        \n        return widget\n    \n    def create_ai_insights_widget(self):\n        \"\"\"Create AI insights widget\"\"\"\n        widget = QGroupBox(\"ü§ñ AI Insights\")\n        layout = QVBoxLayout(widget)\n        \n        self.insights_text = QTextEdit()\n        self.insights_text.setReadOnly(True)\n        self.insights_text.setMaximumHeight(150)\n        self.insights_text.setPlaceholderText(\"AI insights will appear here after analysis...\")\n        layout.addWidget(self.insights_text)\n        \n        return widget\n    \n    def setup_connections(self):\n        \"\"\"Setup signal connections\"\"\"\n        pass\n    \n    # Main functionality methods\n    def load_mailchimp_data(self):\n        \"\"\"Load comprehensive Mailchimp data\"\"\"\n        if not SERVICE_AVAILABLE:\n            QMessageBox.warning(self, \"Service Unavailable\", \"Enhanced AI service is not available.\")\n            return\n        \n        self.status_label.setText(\"Loading Mailchimp data...\")\n        self.progress_bar.setVisible(True)\n        self.progress_bar.setRange(0, 0)\n        self.refresh_btn.setEnabled(False)\n        \n        # Start worker thread\n        self.mailchimp_worker = MailchimpDataWorker()\n        self.mailchimp_worker.progress_signal.connect(self.status_label.setText)\n        self.mailchimp_worker.data_loaded_signal.connect(self.on_mailchimp_data_loaded)\n        self.mailchimp_worker.error_signal.connect(self.on_mailchimp_error)\n        self.mailchimp_worker.finished.connect(self.on_mailchimp_worker_finished)\n        self.mailchimp_worker.start()\n    \n    def on_mailchimp_data_loaded(self, data):\n        \"\"\"Handle loaded Mailchimp data\"\"\"\n        self.mailchimp_data = data\n        self.update_dashboard(data)\n        self.update_campaign_combos(data.get('campaigns', []))\n        self.connection_status.setText(\"üü¢ Connected\")\n        \n        # Auto-run AI analysis\n        if data.get('campaigns'):\n            self.run_ai_analysis()\n    \n    def on_mailchimp_error(self, error):\n        \"\"\"Handle Mailchimp loading error\"\"\"\n        QMessageBox.critical(self, \"Mailchimp Error\", f\"Error loading data: {error}\")\n        self.connection_status.setText(\"üî¥ Error\")\n    \n    def on_mailchimp_worker_finished(self):\n        \"\"\"Handle worker thread completion\"\"\"\n        self.progress_bar.setVisible(False)\n        self.refresh_btn.setEnabled(True)\n        self.status_label.setText(\"Ready\")\n    \n    def update_dashboard(self, data):\n        \"\"\"Update dashboard with loaded data\"\"\"\n        try:\n            campaigns = data.get('campaigns', [])\n            audience_insights = data.get('audience_insights', {})\n            \n            # Update metric cards\n            self.total_campaigns_card.value_label.setText(str(len(campaigns)))\n            \n            if campaigns:\n                avg_open_rate = sum(c.get('open_rate', 0) for c in campaigns) / len(campaigns)\n                avg_click_rate = sum(c.get('click_rate', 0) for c in campaigns) / len(campaigns)\n                self.avg_open_rate_card.value_label.setText(f\"{avg_open_rate * 100:.1f}%\")\n                self.avg_click_rate_card.value_label.setText(f\"{avg_click_rate * 100:.1f}%\")\n            \n            total_subscribers = audience_insights.get('total_subscribers', 0)\n            self.total_subscribers_card.value_label.setText(f\"{total_subscribers:,}\")\n            \n            # Update recent campaigns table\n            self.update_campaigns_table(campaigns[:10])\n            \n            # Update performance chart\n            self.update_performance_chart(campaigns)\n            \n        except Exception as e:\n            logger.error(f\"Error updating dashboard: {e}\")\n    \n    def update_campaigns_table(self, campaigns):\n        \"\"\"Update campaigns table\"\"\"\n        self.campaigns_table.setRowCount(len(campaigns))\n        \n        for row, campaign in enumerate(campaigns):\n            self.campaigns_table.setItem(row, 0, QTableWidgetItem(campaign.get('subject_line', '')[:50]))\n            self.campaigns_table.setItem(row, 1, QTableWidgetItem(f\"{campaign.get('open_rate', 0) * 100:.1f}%\"))\n            self.campaigns_table.setItem(row, 2, QTableWidgetItem(f\"{campaign.get('click_rate', 0) * 100:.1f}%\"))\n            self.campaigns_table.setItem(row, 3, QTableWidgetItem(str(campaign.get('emails_sent', 0))))\n    \n    def update_performance_chart(self, campaigns):\n        \"\"\"Update performance chart\"\"\"\n        if not campaigns:\n            return\n        \n        try:\n            # Clear previous plot\n            self.performance_figure.clear()\n            ax = self.performance_figure.add_subplot(111)\n            \n            # Prepare data\n            dates = [datetime.fromisoformat(c.get('send_time', '').replace('Z', '+00:00')) for c in campaigns if c.get('send_time')]\n            open_rates = [c.get('open_rate', 0) * 100 for c in campaigns if c.get('send_time')]\n            click_rates = [c.get('click_rate', 0) * 100 for c in campaigns if c.get('send_time')]\n            \n            if dates and open_rates:\n                # Sort by date\n                sorted_data = sorted(zip(dates, open_rates, click_rates))\n                dates, open_rates, click_rates = zip(*sorted_data)\n                \n                ax.plot(dates, open_rates, label='Open Rate', marker='o')\n                ax.plot(dates, click_rates, label='Click Rate', marker='s')\n                ax.set_ylabel('Rate (%)')\n                ax.set_title('Campaign Performance Trends')\n                ax.legend()\n                ax.grid(True, alpha=0.3)\n                \n                # Format x-axis\n                self.performance_figure.autofmt_xdate()\n            \n            self.performance_canvas.draw()\n            \n        except Exception as e:\n            logger.error(f\"Error updating performance chart: {e}\")\n    \n    def update_campaign_combos(self, campaigns):\n        \"\"\"Update campaign selection combos\"\"\"\n        self.optimize_campaign_combo.clear()\n        for campaign in campaigns[:20]:  # Limit to recent campaigns\n            subject = campaign.get('subject_line', 'Unknown')[:50]\n            self.optimize_campaign_combo.addItem(subject, campaign.get('campaign_id'))\n    \n    def run_ai_analysis(self):\n        \"\"\"Run comprehensive AI analysis\"\"\"\n        if not self.mailchimp_data.get('campaigns'):\n            QMessageBox.warning(self, \"No Data\", \"No campaign data available for analysis.\")\n            return\n        \n        self.status_label.setText(\"Running AI analysis...\")\n        self.progress_bar.setVisible(True)\n        self.progress_bar.setRange(0, 0)\n        \n        # Start analysis worker\n        self.analysis_worker = CampaignAnalysisWorker(self.mailchimp_data['campaigns'])\n        self.analysis_worker.progress_signal.connect(self.status_label.setText)\n        self.analysis_worker.analysis_complete_signal.connect(self.on_analysis_complete)\n        self.analysis_worker.error_signal.connect(self.on_analysis_error)\n        self.analysis_worker.finished.connect(self.on_analysis_worker_finished)\n        self.analysis_worker.start()\n    \n    def on_analysis_complete(self, analysis_data):\n        \"\"\"Handle completed AI analysis\"\"\"\n        self.campaign_analysis = analysis_data\n        self.update_ai_insights(analysis_data)\n        self.update_analytics_tabs(analysis_data)\n    \n    def on_analysis_error(self, error):\n        \"\"\"Handle analysis error\"\"\"\n        QMessageBox.critical(self, \"Analysis Error\", f\"Error in AI analysis: {error}\")\n    \n    def on_analysis_worker_finished(self):\n        \"\"\"Handle analysis worker completion\"\"\"\n        self.progress_bar.setVisible(False)\n        self.status_label.setText(\"Analysis complete\")\n    \n    def update_ai_insights(self, analysis_data):\n        \"\"\"Update AI insights display\"\"\"\n        try:\n            ai_analysis = analysis_data.get('ai_analysis')\n            if ai_analysis:\n                insights_text = f\"Performance Score: {ai_analysis.performance_score}/10\\n\\n\"\n                insights_text += \"Key Insights:\\n\"\n                for insight in ai_analysis.key_insights[:3]:\n                    insights_text += f\"‚Ä¢ {insight}\\n\" 